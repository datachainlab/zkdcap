use super::{body::*, CertData, QuoteHeader};
use crate::{Result, ENCLAVE_REPORT_LEN, SGX_TEE_TYPE, TD10_REPORT_LEN, TDX_TEE_TYPE};
use anyhow::bail;

#[derive(Clone, Debug, PartialEq, Eq)]
pub struct QuoteV4 {
    /// Header of Quote data structure.
    /// This field is transparent (the user knows its internal structure).
    /// Rest of the Quote data structure can be treated as opaque (hidden from the user).
    pub header: QuoteHeader,
    /// May either contain a SGX Enclave Report (384 bytes) or TD10 Report (584 bytes)
    pub quote_body: QuoteBody,
    /// Size of the Quote Signature Data structure in bytes.
    pub signature_len: u32,
    /// Quote Signature Data
    pub signature: QuoteSignatureDataV4,
}

impl QuoteV4 {
    /// Parse a byte slice into a `QuoteV4` structure.
    pub fn from_bytes(raw_bytes: &[u8]) -> Result<Self> {
        let header = QuoteHeader::from_bytes(&raw_bytes[0..48])?;
        if header.version != 4 {
            bail!("Invalid Quote version");
        }
        let quote_body;
        let mut offset: usize = 48;
        match header.tee_type {
            SGX_TEE_TYPE => {
                offset += ENCLAVE_REPORT_LEN;
                quote_body =
                    QuoteBody::SGXQuoteBody(EnclaveReport::from_bytes(&raw_bytes[48..offset])?);
            }
            TDX_TEE_TYPE => {
                offset += TD10_REPORT_LEN;
                quote_body =
                    QuoteBody::TD10QuoteBody(TD10ReportBody::from_bytes(&raw_bytes[48..offset])?);
            }
            _ => {
                bail!("Unknown TEE type")
            }
        }
        let signature_len = u32::from_le_bytes([
            raw_bytes[offset],
            raw_bytes[offset + 1],
            raw_bytes[offset + 2],
            raw_bytes[offset + 3],
        ]);
        offset += 4;
        let signature_slice = &raw_bytes[offset..offset + signature_len as usize];
        let signature = QuoteSignatureDataV4::from_bytes(signature_slice)?;

        Ok(QuoteV4 {
            header,
            quote_body,
            signature_len,
            signature,
        })
    }

    /// Serialize the `QuoteV4` structure to bytes.
    pub fn to_bytes(&self) -> Vec<u8> {
        let mut output_vec = Vec::new();
        output_vec.extend_from_slice(&self.header.to_bytes());
        match &self.quote_body {
            QuoteBody::SGXQuoteBody(body) => {
                output_vec.extend_from_slice(&body.to_bytes());
            }
            QuoteBody::TD10QuoteBody(body) => {
                output_vec.extend_from_slice(&body.to_bytes());
            }
        }
        output_vec.extend_from_slice(&self.signature_len.to_le_bytes());
        output_vec.extend_from_slice(&self.signature.to_bytes());
        output_vec
    }
}

#[derive(Clone, Debug, PartialEq, Eq)]
pub struct QuoteSignatureDataV4 {
    /// ECDSA signature, the r component followed by the s component, 2 x 32 bytes.
    pub quote_signature: [u8; 64],
    /// Public part of the Attestation Key generated by the Quoting Enclave.
    /// EC KT-I Public Key, the x-coordinate followed by the y-coordinate (on the RFC 6090 P-256 curve), 2 x 32 bytes.
    pub ecdsa_attestation_key: [u8; 64],
    /// QE Cert Data
    pub qe_cert_data: CertData,
}

impl QuoteSignatureDataV4 {
    /// Parse a byte slice into a `QuoteSignatureDataV4` structure.
    pub fn from_bytes(raw_bytes: &[u8]) -> Result<Self> {
        if raw_bytes.len() < 128 {
            bail!("Invalid QuoteSignatureDataV4 length");
        }
        let mut quote_signature = [0; 64];
        quote_signature.copy_from_slice(&raw_bytes[0..64]);
        let mut ecdsa_attestation_key = [0; 64];
        ecdsa_attestation_key.copy_from_slice(&raw_bytes[64..128]);
        let qe_cert_data = CertData::from_bytes(&raw_bytes[128..])?;

        Ok(QuoteSignatureDataV4 {
            quote_signature,
            ecdsa_attestation_key,
            qe_cert_data,
        })
    }

    /// Serialize the `QuoteSignatureDataV4` structure to bytes.
    pub fn to_bytes(&self) -> Vec<u8> {
        let mut output_vec = Vec::new();
        output_vec.extend_from_slice(&self.quote_signature);
        output_vec.extend_from_slice(&self.ecdsa_attestation_key);
        output_vec.extend_from_slice(&self.qe_cert_data.to_bytes());
        output_vec
    }
}
